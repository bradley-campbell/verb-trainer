[{"/Users/lovesit/Documents/codingProjects/verb-trainer/client/src/index.js":"1","/Users/lovesit/Documents/codingProjects/verb-trainer/client/src/views/App/index.js":"2","/Users/lovesit/Documents/codingProjects/verb-trainer/client/src/views/HomePage/index.js":"3","/Users/lovesit/Documents/codingProjects/verb-trainer/client/src/components/FilterRadioGroup/index.js":"4","/Users/lovesit/Documents/codingProjects/verb-trainer/client/src/components/FilterRadioGroup/MoodRadio.js":"5","/Users/lovesit/Documents/codingProjects/verb-trainer/client/src/components/Header.js":"6","/Users/lovesit/Documents/codingProjects/verb-trainer/client/src/components/SearchBar.js":"7","/Users/lovesit/Documents/codingProjects/verb-trainer/client/src/context/QueryContext.js":"8","/Users/lovesit/Documents/codingProjects/verb-trainer/client/src/views/Quiz/index.js":"9","/Users/lovesit/Documents/codingProjects/verb-trainer/client/src/components/QuizInput.js":"10","/Users/lovesit/Documents/codingProjects/verb-trainer/client/src/components/FilterRadioGroup/PersonRadio.js":"11"},{"size":399,"mtime":1611437152729,"results":"12","hashOfConfig":"13"},{"size":826,"mtime":1611434466134,"results":"14","hashOfConfig":"13"},{"size":776,"mtime":1611509956483,"results":"15","hashOfConfig":"13"},{"size":813,"mtime":1611509868057,"results":"16","hashOfConfig":"13"},{"size":742,"mtime":1611453145653,"results":"17","hashOfConfig":"13"},{"size":518,"mtime":1611434600945,"results":"18","hashOfConfig":"13"},{"size":942,"mtime":1611439932707,"results":"19","hashOfConfig":"13"},{"size":1859,"mtime":1611510773941,"results":"20","hashOfConfig":"13"},{"size":2353,"mtime":1611510928895,"results":"21","hashOfConfig":"13"},{"size":2760,"mtime":1611531097760,"results":"22","hashOfConfig":"13"},{"size":820,"mtime":1611509886394,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"jhmyqt",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},"/Users/lovesit/Documents/codingProjects/verb-trainer/client/src/index.js",[],["55","56"],"/Users/lovesit/Documents/codingProjects/verb-trainer/client/src/views/App/index.js",[],["57","58"],"/Users/lovesit/Documents/codingProjects/verb-trainer/client/src/views/HomePage/index.js",["59"],"import React, { useState, useContext } from \"react\";\n\nimport FilterRadioGroup from \"../../components/FilterRadioGroup\";\nimport SearchBar from \"../../components/SearchBar\";\nimport { QueryContext } from \"../../context/QueryContext\";\n\nconst HomePage = () => {\n  const [data, setData] = useState(\"\");\n\n  const {\n    query: { verb, mood, person, tense },\n  } = useContext(QueryContext);\n\n  const handleFetch = async () => {\n    const url = `/conjug?verb=${verb}&personne=${person}&temps=${tense}&mood=${mood}`;\n    const response = await fetch(url);\n    const parsed = await response.json();\n    alert(parsed.data);\n    setData(parsed.data);\n  };\n\n  return (\n    <>\n      <FilterRadioGroup />\n      <SearchBar handleFetch={handleFetch} />\n    </>\n  );\n};\n\nexport default HomePage;\n","/Users/lovesit/Documents/codingProjects/verb-trainer/client/src/components/FilterRadioGroup/index.js",["60"],"import React, { useEffect, useContext } from \"react\";\n\nimport { Segment } from \"semantic-ui-react\";\nimport { QueryContext } from \"../../context/QueryContext\";\nimport MoodRadio from \"./MoodRadio\";\nimport PersonRadio from \"./PersonRadio\";\n\nconst segmentStyling = {\n  display: \"flex\",\n  justifyContent: \"space-evenly\",\n  alignItems: \"center\",\n  margin: \"25px 10% 25px 10%\",\n};\n\nconst FilterRadioGroup = () => {\n  const {\n    options: { mood, tense },\n    query,\n    setQuery,\n  } = useContext(QueryContext);\n\n  useEffect(() => {\n    setQuery({ ...query, tense: \"Pr√©sent\" });\n  }, [query.mood]);\n\n  return (\n    <Segment style={segmentStyling}>\n      <MoodRadio data={mood} label=\"mood\" />\n      <MoodRadio data={tense} label=\"tense\" />\n      <PersonRadio />\n    </Segment>\n  );\n};\n\nexport default FilterRadioGroup;\n","/Users/lovesit/Documents/codingProjects/verb-trainer/client/src/components/FilterRadioGroup/MoodRadio.js",[],"/Users/lovesit/Documents/codingProjects/verb-trainer/client/src/components/Header.js",[],["61","62"],"/Users/lovesit/Documents/codingProjects/verb-trainer/client/src/components/SearchBar.js",["63","64","65","66"],"import React, { useState, useContext } from \"react\";\nimport { Input, Form, Button } from \"semantic-ui-react\";\n\nimport { QueryContext } from \"../context/QueryContext\";\n\n// const submitButtonStyles = {\n//   backgroundColor: \"#bc5200\",\n//   color: \"white\",\n// };\n\nconst wrapperStyle = {\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  flexDirection: window.innerWidth > 700 ? \"row\" : \"column\",\n};\n\nconst FilterResults = ({ handleFetch }) => {\n  const {\n    options: { mood, tense, person },\n    query,\n    setQuery,\n  } = useContext(QueryContext);\n\n  const handleSubmit = () => {\n    handleFetch();\n  };\n\n  return (\n    <div style={wrapperStyle}>\n      <Form onSubmit={handleSubmit}>\n        <Input\n          onChange={(e) => {\n            setQuery({ ...query, verb: e.target.value });\n          }}\n        />\n        <Button type=\"submit\">Search</Button>\n      </Form>\n    </div>\n  );\n};\n\nexport default FilterResults;\n","/Users/lovesit/Documents/codingProjects/verb-trainer/client/src/context/QueryContext.js",[],["67","68"],"/Users/lovesit/Documents/codingProjects/verb-trainer/client/src/views/Quiz/index.js",["69","70","71"],"/Users/lovesit/Documents/codingProjects/verb-trainer/client/src/components/QuizInput.js",["72","73","74"],"import React, { useContext, useEffect } from \"react\";\nimport { Segment, Input, SegmentGroup, Button } from \"semantic-ui-react\";\nimport { firstGroup, secondGroup, thirdGroup } from \"french-verbs-list\";\n\nimport { QueryContext } from \"../context/QueryContext\";\n\nconst inputSegment = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n};\n\nconst QuizInput = () => {\n  const { userResponse, setUserResponse, query, setQuery } = useContext(\n    QueryContext\n  );\n\n  // const fetchDefinition = async () => {\n  //   const url =\n  //     \"https://od-api.oxforddictionaries.com/api/v2/entries/fr/picoler\";\n\n  //   const reqObj = {\n  //     mode: \"no-cors\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //       app_key: process.env.REACT_APP_OXFORD_KEY,\n  //       app_id: process.env.REACT_APP_OXFORD_KEY,\n  //     },\n  //   };\n\n  //   const data = await fetch(url, reqObj);\n  //   const parsed = await data.json();\n  //   console.log(parsed);\n  // };\n\n  const selectRandomVerb = () => {\n    setQuery({ ...query, verb: firstGroup[100] });\n  };\n\n  const handleChange = (e, { value }) => {\n    setQuery({ ...query, verb: value });\n  };\n\n  return (\n    <Segment>\n      <Input\n        placeholder=\"Choose a verb...\"\n        onChange={handleChange}\n        value={query.verb}\n      />\n      <Button onClick={selectRandomVerb}>Random Verb</Button>\n      <SegmentGroup horizontal>\n        <Segment style={inputSegment}>\n          <Input\n            placeholder=\"1s\"\n            onChange={(e) => {\n              setUserResponse({ ...userResponse, s1: e.target.value });\n              console.log(userResponse);\n            }}\n          />\n          <Input\n            placeholder=\"2s\"\n            onChange={(e) => {\n              setUserResponse({ ...userResponse, s2: e.target.value });\n            }}\n          />\n          <Input\n            placeholder=\"3s\"\n            onChange={(e) => {\n              setUserResponse({ ...userResponse, s3: e.target.value });\n            }}\n          />\n        </Segment>\n        <Segment style={inputSegment}>\n          <Input\n            placeholder=\"1p\"\n            onChange={(e) => {\n              setUserResponse({ ...userResponse, p1: e.target.value });\n            }}\n          />\n          <Input\n            placeholder=\"2p\"\n            onChange={(e) => {\n              setUserResponse({ ...userResponse, p2: e.target.value });\n            }}\n          />\n          <Input\n            placeholder=\"3p\"\n            onChange={(e) => {\n              setUserResponse({ ...userResponse, p3: e.target.value });\n            }}\n          />\n        </Segment>\n      </SegmentGroup>\n      <Button>Validate</Button>\n    </Segment>\n  );\n};\n\nexport default QuizInput;\n","/Users/lovesit/Documents/codingProjects/verb-trainer/client/src/components/FilterRadioGroup/PersonRadio.js",["75"],"import React, { useContext } from \"react\";\nimport { Form, Radio, Segment } from \"semantic-ui-react\";\nimport { QueryContext } from \"../../context/QueryContext\";\n\nconst MoodRadio = ({ data, label }) => {\n  const {\n    query,\n    setQuery,\n    options: { person },\n  } = useContext(QueryContext);\n\n  return (\n    <Form>\n      <Form.Field>Person</Form.Field>\n      {person.map((option) => {\n        return (\n          <Form.Field>\n            <Radio\n              label={option.label}\n              name=\"radioGroup\"\n              value={option.value}\n              checked={query.person === option.value}\n              onChange={() => {\n                setQuery({ ...query, person: option.value });\n              }}\n            />\n          </Form.Field>\n        );\n      })}\n    </Form>\n  );\n};\n\nexport default MoodRadio;\n",{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"76","replacedBy":"80"},{"ruleId":"78","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":8,"column":10,"nodeType":"84","messageId":"85","endLine":8,"endColumn":14},{"ruleId":"86","severity":1,"message":"87","line":24,"column":6,"nodeType":"88","endLine":24,"endColumn":18,"suggestions":"89"},{"ruleId":"76","replacedBy":"90"},{"ruleId":"78","replacedBy":"91"},{"ruleId":"82","severity":1,"message":"92","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":25},{"ruleId":"82","severity":1,"message":"93","line":20,"column":16,"nodeType":"84","messageId":"85","endLine":20,"endColumn":20},{"ruleId":"82","severity":1,"message":"94","line":20,"column":22,"nodeType":"84","messageId":"85","endLine":20,"endColumn":27},{"ruleId":"82","severity":1,"message":"95","line":20,"column":29,"nodeType":"84","messageId":"85","endLine":20,"endColumn":35},{"ruleId":"76","replacedBy":"96"},{"ruleId":"78","replacedBy":"97"},{"ruleId":"82","severity":1,"message":"98","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":27},{"ruleId":"82","severity":1,"message":"92","line":1,"column":29,"nodeType":"84","messageId":"85","endLine":1,"endColumn":37},{"ruleId":"82","severity":1,"message":"99","line":2,"column":8,"nodeType":"84","messageId":"85","endLine":2,"endColumn":18},{"ruleId":"82","severity":1,"message":"100","line":1,"column":29,"nodeType":"84","messageId":"85","endLine":1,"endColumn":38},{"ruleId":"82","severity":1,"message":"101","line":3,"column":22,"nodeType":"84","messageId":"85","endLine":3,"endColumn":33},{"ruleId":"82","severity":1,"message":"102","line":3,"column":35,"nodeType":"84","messageId":"85","endLine":3,"endColumn":45},{"ruleId":"82","severity":1,"message":"103","line":2,"column":23,"nodeType":"84","messageId":"85","endLine":2,"endColumn":30},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],["104"],["105"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'query' and 'setQuery'. Either include them or remove the dependency array.","ArrayExpression",["106"],["104"],["105"],"'useState' is defined but never used.","'mood' is assigned a value but never used.","'tense' is assigned a value but never used.","'person' is assigned a value but never used.",["104"],["105"],"'useContext' is defined but never used.","'RadioGroup' is defined but never used.","'useEffect' is defined but never used.","'secondGroup' is defined but never used.","'thirdGroup' is defined but never used.","'Segment' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},"Update the dependencies array to be: [query, query.mood, setQuery]",{"range":"109","text":"110"},[577,589],"[query, query.mood, setQuery]"]